openapi: 3.0.0
info:
  title: Taronja Gateway API
  version: v1.0.0
  description: API for Taronja Gateway interal and public endpoints

paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      security:
        - {}
        - cookieAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /logout:
    get:
        summary: Logs out the current user
        operationId: logoutUser
        tags:
            - User
        parameters:
            - in: cookie
              name: tg_session_token
              schema:
                type: string
              required: false
              description: Session token cookie for authentication
            - in: query
              name: redirect
              schema:
                type: string
              required: false
              description: URL to redirect to after successful logout
              example: "/login"
        responses:
            '302':
                description: Successfully logged out and redirected to root page, even if no redirect URL is provided, even if the user is not logged in
                headers:
                    Location:
                        schema:
                            type: string
                            example: "/"
                        description: URL to redirect to after logout
                    Set-Cookie:
                        schema:
                            type: string
                            example: "tg_session_token=; Path=/; HttpOnly; Secure; SameSite=Strict; Max-Age=0"
                        description: Clears the session cookie by setting it to an empty value with immediate expiration
                    Cache-Control:
                        schema:
                            type: string
                            example: "no-store"
                        description: Prevents caching of the response
  /me:
    get:
      summary: Get current logged user information
      operationId: getCurrentUser
      tags:
        - User
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Information about the currently authenticated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    example: true
                  username:
                    type: string
                    example: "testuser"
                  email:
                    type: string
                    format: email
                    example: "user@example.com"
                  name:
                    type: string
                    nullable: true
                    example: "Test User"
                  picture:
                    type: string
                    format: uri
                    nullable: true
                    example: "https://example.com/picture.jpg"
                  givenName:
                    type: string
                    nullable: true
                    example: "Test"
                  familyName:
                    type: string
                    nullable: true
                    example: "User"
                  provider:
                    type: string
                    example: "google"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-01-01T12:00:00Z"
                  isAdmin:
                    type: boolean
                    example: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - User
      security:
        - cookieAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      # No security for user creation, as it's typically a public endpoint
      # If registration requires admin privileges or similar, add:
      # security:
      #   - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse' # Or a simpler success message
        '400':
          description: Bad Request (e.g., missing fields, invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict (e.g., username or email already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - User
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request (e.g. invalid user ID format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/users/{userId}/tokens:
    get:
      summary: List API tokens for a specific user (admin only)
      operationId: listTokens
      tags:
        - Token
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user whose tokens to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A list of user's tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized (not logged in or not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new API token for a specific user (admin only)
      operationId: createToken
      tags:
        - Token
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user for whom to create a token
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreateRequest'
      responses:
        '201':
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (not logged in or not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tokens/{tokenId}:
    get:
      summary: Get token details (admin only)
      operationId: getToken
      tags:
        - Token
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: tokenId
          in: path
          required: true
          description: ID of the token to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Token details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized (not logged in or not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Revoke/delete a token (admin only)
      operationId: deleteToken
      tags:
        - Token
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: tokenId
          in: path
          required: true
          description: ID of the token to revoke
          schema:
            type: string
      responses:
        '204':
          description: Token successfully revoked
        '401':
          description: Unauthorized (not logged in or not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/statistics/requests:
    get:
      summary: Get request statistics
      operationId: getRequestStatistics
      tags:
        - Statistics
      security:
        - cookieAuth: []
      parameters:
        - name: start_date
          in: query
          required: false
          description: Start date for filtering results (ISO 8601 format)
          schema:
            type: string
            format: date-time
            example: "2025-01-01T00:00:00Z"
        - name: end_date
          in: query
          required: false
          description: End date for filtering results (ISO 8601 format)
          schema:
            type: string
            format: date-time
            example: "2025-12-31T23:59:59Z"
      responses:
        '200':
          description: Request statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatistics'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/statistics/requests/details:
    get:
      summary: Retrieve detailed information about requests made to the gateway
      operationId: getRequestDetails
      tags:
        - Statistics
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
          required: false
          description: Optional start date for filtering results (ISO 8601 format)
          example: "2025-01-01T00:00:00Z"
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
          required: false
          description: Optional end date for filtering results (ISO 8601 format)
          example: "2025-12-31T23:59:59Z"
      responses:
        '200':
          description: List of requests with detailed information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestDetailsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/credits/{userId}:
    get:
      summary: Get user's current credit balance
      operationId: getUserCredits
      tags:
        - Credits
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to get credits for
          schema:
            type: string
      responses:
        '200':
          description: User's current credit balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreditsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (user can only view own credits unless admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add or deduct credits for a user (admin only)
      operationId: adjustUserCredits
      tags:
        - Credits
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to adjust credits for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditAdjustmentRequest'
      responses:
        '200':
          description: Credits adjusted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransactionResponse'
        '400':
          description: Bad Request (invalid amount or insufficient balance)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/credits/{userId}/history:
    get:
      summary: Get user's credit transaction history
      operationId: getUserCreditHistory
      tags:
        - Credits
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to get credit history for
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          required: false
          description: Maximum number of transactions to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: Number of transactions to skip
      responses:
        '200':
          description: User's credit transaction history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditHistoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (user can only view own history unless admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/admin/credits:
    get:
      summary: Get all users' credit balances (admin only)
      operationId: getAllUserCredits
      tags:
        - Credits
        - Admin
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          required: false
          description: Maximum number of users to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: Number of users to skip
      responses:
        '200':
          description: List of all users' credit balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUserCreditsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        timestamp:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        uptime:
          type: string
          description: "Server uptime duration"
          example: "2h30m45s"
        database:
          type: object
          properties:
            status:
              type: string
              example: "ok"
            open_connections:
              type: integer
              description: "Number of open database connections"
              example: 5
          required:
            - status
      required:
        - status
        - timestamp
        - uptime
        - database
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: "Unauthorized"
      required:
        - code
        - message
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
          example: "newuser"
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"
      required:
        - username
        - email
        - password
    UserResponse:
      type: object
      properties:
        id:
          type: string # Assuming User ID is a string (e.g., UUID or from path)
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "testuser"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          nullable: true
          example: "Test User"
        picture:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/picture.jpg"
        provider:
          type: string
          nullable: true
          example: "google"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
      required:
        - id
        - username
        - createdAt
        - updatedAt
    RequestStatistics:
      type: object
      properties:
        totalRequests:
          type: integer
          example: 12345
          description: Total number of requests
        requestsByStatus:
          type: object
          additionalProperties:
            type: integer
          example:
            200: 10000
            404: 1500
            500: 845
          description: Number of requests grouped by HTTP status code
        averageResponseTime:
          type: number
          format: float
          example: 125.5
          description: Average response time in milliseconds
        averageResponseSize:
          type: number
          format: float
          example: 2048.7
          description: Average response size in bytes
        requestsByCountry:
          type: object
          additionalProperties:
            type: integer
          example:
            US: 5000
            ES: 3000
            FR: 2000
            UK: 1500
            DE: 845
          description: Number of requests grouped by country code
        requestsByDeviceType:
          type: object
          additionalProperties:
            type: integer
          example:
            desktop: 8000
            mobile: 3500
            tablet: 800
            unknown: 45
          description: Number of requests grouped by device type
        requestsByPlatform:
          type: object
          additionalProperties:
            type: integer
          example:
            Windows: 5000
            Android: 3000
            iOS: 2000
            macOS: 1500
            Linux: 845
          description: Number of requests grouped by platform
        requestsByBrowser:
          type: object
          additionalProperties:
            type: integer
          example:
            Chrome: 7000
            Safari: 2500
            Firefox: 1800
            Edge: 1000
            Other: 45
          description: Number of requests grouped by browser
        requestsByUser:
          type: object
          additionalProperties:
            type: integer
          example:
            alice: 1200
            bob: 900
            guest: 300
          description: Number of requests grouped by user (username or user ID)
        requestsByJA4Fingerprint:
          type: object
          additionalProperties:
            type: integer
          example:
            "ge11nn05_9c68f7ca5aaf_d4bd6ad6f3ac": 1500
            "ge11nn05_7f3e9c2a1f8b_a9e7b3d4c2f1": 800
            "ge11nn05_1a2b3c4d5e6f_f1e2d3c4b5a6": 500
          description: Number of requests grouped by JA4 HTTP fingerprint
      required:
        - totalRequests
        - requestsByStatus
        - averageResponseTime
        - averageResponseSize
        - requestsByCountry
        - requestsByDeviceType
        - requestsByPlatform
        - requestsByBrowser
        - requestsByUser
        - requestsByJA4Fingerprint
    RequestDetail:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          description: The requested URL path
        user_id:
          type: string
          nullable: true
          description: ID of the authenticated user making the request
        username:
          type: string
          nullable: true
          description: Username of the authenticated user making the request
        status_code:
          type: integer
        response_time:
          type: number
        response_size:
          type: number
        country:
          type: string
        city:
          type: string
        latitude:
          type: number
          nullable: true
          description: GPS latitude coordinate
        longitude:
          type: number
          nullable: true
          description: GPS longitude coordinate
        device_type:
          type: string
        platform:
          type: string
        platform_version:
          type: string
          description: Version of the operating system/platform
        browser:
          type: string
        browser_version:
          type: string
          description: Version of the browser
      required:
        - id
        - timestamp
        - path
        - user_id
        - status_code
        - response_time
        - response_size
        - country
        - city
        - device_type
        - platform
        - platform_version
        - browser
        - browser_version
    RequestDetailsResponse:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/RequestDetail'
      required:
        - requests
    
    TokenResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the token
        name:
          type: string
          description: User-defined name for the token
        is_active:
          type: boolean
          description: Whether the token is active
        created_at:
          type: string
          format: date-time
          description: When the token was created
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: When the token expires (null if no expiration)
        last_used_at:
          type: string
          format: date-time
          nullable: true
          description: When the token was last used
        usage_count:
          type: integer
          description: Number of times the token has been used
        scopes:
          type: array
          items:
            type: string
          description: Permissions/scopes for the token
        revoked_at:
          type: string
          format: date-time
          nullable: true
          description: When the token was revoked (null if not revoked)
      required:
        - id
        - name
        - is_active
        - created_at
        - usage_count
        - scopes

    TokenCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: User-defined name for the token
          minLength: 1
          maxLength: 100
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: When the token should expire (null for no expiration)
        scopes:
          type: array
          items:
            type: string
          description: Permissions/scopes for the token
          default: []
      required:
        - name

    TokenCreateResponse:
      type: object
      properties:
        token:
          type: string
          description: The actual token string (only returned on creation)
        token_info:
          $ref: '#/components/schemas/TokenResponse'
      required:
        - token
        - token_info

    UserCreditsResponse:
      type: object
      properties:
        user_id:
          type: string
          description: ID of the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
            type: string
            description: Username of the user
            example: "testuser"
        email:
            type: string
            format: email
            description: Email of the user
            example: "testuser@example.com"
        balance:
          type: integer
          description: Current credit balance
          example: 1500
        last_updated:
          type: string
          format: date-time
          description: When the balance was last updated
          example: "2025-09-15T10:30:00Z"
      required:
        - user_id
        - balance
        - last_updated

    CreditAdjustmentRequest:
      type: object
      properties:
        amount:
          type: integer
          description: Amount to add (positive) or deduct (negative)
          example: 100
        description:
          type: string
          description: Description of the credit adjustment
          maxLength: 255
          example: "Admin adjustment - promotional credits"
      required:
        - amount
        - description

    CreditTransactionResponse:
      type: object
      properties:
        id:
          type: string
          description: Transaction ID
          example: "456e7890-e12b-34c5-d678-901234567890"
        user_id:
          type: string
          description: ID of the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        amount:
          type: integer
          description: Amount added (positive) or deducted (negative)
          example: 100
        balance_after:
          type: integer
          description: Balance after this transaction
          example: 1600
        description:
          type: string
          description: Description of the transaction
          example: "Admin adjustment - promotional credits"
        created_at:
          type: string
          format: date-time
          description: When the transaction was created
          example: "2025-09-15T10:30:00Z"
      required:
        - id
        - user_id
        - amount
        - balance_after
        - description
        - created_at

    CreditHistoryResponse:
      type: object
      properties:
        user_id:
          type: string
          description: ID of the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        current_balance:
          type: integer
          description: Current credit balance
          example: 1500
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/CreditTransactionResponse'
          description: List of credit transactions
        total_count:
          type: integer
          description: Total number of transactions (for pagination)
          example: 25
        limit:
          type: integer
          description: Maximum number of transactions returned
          example: 50
        offset:
          type: integer
          description: Number of transactions skipped
          example: 0
      required:
        - user_id
        - current_balance
        - transactions
        - total_count
        - limit
        - offset

    AllUserCreditsResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserCreditsResponse'
          description: List of users with their credit balances
        total_count:
          type: integer
          description: Total number of users (for pagination)
          example: 150
        limit:
          type: integer
          description: Maximum number of users returned
          example: 50
        offset:
          type: integer
          description: Number of users skipped
          example: 0
      required:
        - users
        - total_count
        - limit
        - offset

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: tg_session_token # Ensure this is your actual session cookie name
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
