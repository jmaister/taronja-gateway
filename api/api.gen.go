//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// AllUserCreditsResponse defines model for AllUserCreditsResponse.
type AllUserCreditsResponse struct {
	// Limit Maximum number of users returned
	Limit int `json:"limit"`

	// Offset Number of users skipped
	Offset int `json:"offset"`

	// TotalCount Total number of users (for pagination)
	TotalCount int `json:"total_count"`

	// Users List of users with their credit balances
	Users []UserCreditsResponse `json:"users"`
}

// CreditAdjustmentRequest defines model for CreditAdjustmentRequest.
type CreditAdjustmentRequest struct {
	// Amount Amount to add (positive) or deduct (negative)
	Amount int `json:"amount"`

	// Description Description of the credit adjustment
	Description string `json:"description"`
}

// CreditHistoryResponse defines model for CreditHistoryResponse.
type CreditHistoryResponse struct {
	// CurrentBalance Current credit balance
	CurrentBalance int `json:"current_balance"`

	// Limit Maximum number of transactions returned
	Limit int `json:"limit"`

	// Offset Number of transactions skipped
	Offset int `json:"offset"`

	// TotalCount Total number of transactions (for pagination)
	TotalCount int `json:"total_count"`

	// Transactions List of credit transactions
	Transactions []CreditTransactionResponse `json:"transactions"`

	// UserId ID of the user
	UserId string `json:"user_id"`
}

// CreditTransactionResponse defines model for CreditTransactionResponse.
type CreditTransactionResponse struct {
	// Amount Amount added (positive) or deducted (negative)
	Amount int `json:"amount"`

	// BalanceAfter Balance after this transaction
	BalanceAfter int `json:"balance_after"`

	// CreatedAt When the transaction was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the transaction
	Description string `json:"description"`

	// Id Transaction ID
	Id string `json:"id"`

	// UserId ID of the user
	UserId string `json:"user_id"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Database struct {
		// OpenConnections Number of open database connections
		OpenConnections *int   `json:"open_connections,omitempty"`
		Status          string `json:"status"`
	} `json:"database"`
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`

	// Uptime Server uptime duration
	Uptime string `json:"uptime"`
}

// RequestDetail defines model for RequestDetail.
type RequestDetail struct {
	Browser string `json:"browser"`

	// BrowserVersion Version of the browser
	BrowserVersion string `json:"browser_version"`
	City           string `json:"city"`
	Country        string `json:"country"`
	DeviceType     string `json:"device_type"`
	Id             string `json:"id"`

	// Latitude GPS latitude coordinate
	Latitude *float32 `json:"latitude"`

	// Longitude GPS longitude coordinate
	Longitude *float32 `json:"longitude"`

	// Path The requested URL path
	Path     string `json:"path"`
	Platform string `json:"platform"`

	// PlatformVersion Version of the operating system/platform
	PlatformVersion string    `json:"platform_version"`
	ResponseSize    float32   `json:"response_size"`
	ResponseTime    float32   `json:"response_time"`
	StatusCode      int       `json:"status_code"`
	Timestamp       time.Time `json:"timestamp"`

	// UserId ID of the authenticated user making the request
	UserId *string `json:"user_id"`

	// Username Username of the authenticated user making the request
	Username *string `json:"username"`
}

// RequestDetailsResponse defines model for RequestDetailsResponse.
type RequestDetailsResponse struct {
	Requests []RequestDetail `json:"requests"`
}

// RequestStatistics defines model for RequestStatistics.
type RequestStatistics struct {
	// AverageResponseSize Average response size in bytes
	AverageResponseSize float32 `json:"averageResponseSize"`

	// AverageResponseTime Average response time in milliseconds
	AverageResponseTime float32 `json:"averageResponseTime"`

	// RequestsByBrowser Number of requests grouped by browser
	RequestsByBrowser map[string]int `json:"requestsByBrowser"`

	// RequestsByCountry Number of requests grouped by country code
	RequestsByCountry map[string]int `json:"requestsByCountry"`

	// RequestsByDeviceType Number of requests grouped by device type
	RequestsByDeviceType map[string]int `json:"requestsByDeviceType"`

	// RequestsByJA4Fingerprint Number of requests grouped by JA4 HTTP fingerprint
	RequestsByJA4Fingerprint map[string]int `json:"requestsByJA4Fingerprint"`

	// RequestsByPlatform Number of requests grouped by platform
	RequestsByPlatform map[string]int `json:"requestsByPlatform"`

	// RequestsByStatus Number of requests grouped by HTTP status code
	RequestsByStatus map[string]int `json:"requestsByStatus"`

	// RequestsByUser Number of requests grouped by user (username or user ID)
	RequestsByUser map[string]int `json:"requestsByUser"`

	// TotalRequests Total number of requests
	TotalRequests int `json:"totalRequests"`
}

// TokenCreateRequest defines model for TokenCreateRequest.
type TokenCreateRequest struct {
	// ExpiresAt When the token should expire (null for no expiration)
	ExpiresAt *time.Time `json:"expires_at"`

	// Name User-defined name for the token
	Name string `json:"name"`

	// Scopes Permissions/scopes for the token
	Scopes *[]string `json:"scopes,omitempty"`
}

// TokenCreateResponse defines model for TokenCreateResponse.
type TokenCreateResponse struct {
	// Token The actual token string (only returned on creation)
	Token     string        `json:"token"`
	TokenInfo TokenResponse `json:"token_info"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// CreatedAt When the token was created
	CreatedAt time.Time `json:"created_at"`

	// ExpiresAt When the token expires (null if no expiration)
	ExpiresAt *time.Time `json:"expires_at"`

	// Id Unique identifier for the token
	Id string `json:"id"`

	// IsActive Whether the token is active
	IsActive bool `json:"is_active"`

	// LastUsedAt When the token was last used
	LastUsedAt *time.Time `json:"last_used_at"`

	// Name User-defined name for the token
	Name string `json:"name"`

	// RevokedAt When the token was revoked (null if not revoked)
	RevokedAt *time.Time `json:"revoked_at"`

	// Scopes Permissions/scopes for the token
	Scopes []string `json:"scopes"`

	// UsageCount Number of times the token has been used
	UsageCount int `json:"usage_count"`
}

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// UserCreditsResponse defines model for UserCreditsResponse.
type UserCreditsResponse struct {
	// Balance Current credit balance
	Balance int `json:"balance"`

	// Email Email of the user
	Email *openapi_types.Email `json:"email,omitempty"`

	// LastUpdated When the balance was last updated
	LastUpdated time.Time `json:"last_updated"`

	// UserId ID of the user
	UserId string `json:"user_id"`

	// Username Username of the user
	Username *string `json:"username,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	CreatedAt time.Time            `json:"createdAt"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        string               `json:"id"`
	Name      *string              `json:"name"`
	Picture   *string              `json:"picture"`
	Provider  *string              `json:"provider"`
	UpdatedAt time.Time            `json:"updatedAt"`
	Username  string               `json:"username"`
}

// GetAllUserCreditsParams defines parameters for GetAllUserCredits.
type GetAllUserCreditsParams struct {
	// Limit Maximum number of users to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUserCreditHistoryParams defines parameters for GetUserCreditHistory.
type GetUserCreditHistoryParams struct {
	// Limit Maximum number of transactions to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of transactions to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetRequestStatisticsParams defines parameters for GetRequestStatistics.
type GetRequestStatisticsParams struct {
	// StartDate Start date for filtering results (ISO 8601 format)
	StartDate *time.Time `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate End date for filtering results (ISO 8601 format)
	EndDate *time.Time `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetRequestDetailsParams defines parameters for GetRequestDetails.
type GetRequestDetailsParams struct {
	// StartDate Optional start date for filtering results (ISO 8601 format)
	StartDate *time.Time `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate Optional end date for filtering results (ISO 8601 format)
	EndDate *time.Time `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// LogoutUserParams defines parameters for LogoutUser.
type LogoutUserParams struct {
	// Redirect URL to redirect to after successful logout
	Redirect *string `form:"redirect,omitempty" json:"redirect,omitempty"`

	// TgSessionToken Session token cookie for authentication
	TgSessionToken *string `form:"tg_session_token,omitempty" json:"tg_session_token,omitempty"`
}

// AdjustUserCreditsJSONRequestBody defines body for AdjustUserCredits for application/json ContentType.
type AdjustUserCreditsJSONRequestBody = CreditAdjustmentRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreateRequest

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = TokenCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users' credit balances (admin only)
	// (GET /api/admin/credits)
	GetAllUserCredits(w http.ResponseWriter, r *http.Request, params GetAllUserCreditsParams)
	// Get user's current credit balance
	// (GET /api/credits/{userId})
	GetUserCredits(w http.ResponseWriter, r *http.Request, userId string)
	// Add or deduct credits for a user (admin only)
	// (POST /api/credits/{userId})
	AdjustUserCredits(w http.ResponseWriter, r *http.Request, userId string)
	// Get user's credit transaction history
	// (GET /api/credits/{userId}/history)
	GetUserCreditHistory(w http.ResponseWriter, r *http.Request, userId string, params GetUserCreditHistoryParams)
	// Get request statistics
	// (GET /api/statistics/requests)
	GetRequestStatistics(w http.ResponseWriter, r *http.Request, params GetRequestStatisticsParams)
	// Retrieve detailed information about requests made to the gateway
	// (GET /api/statistics/requests/details)
	GetRequestDetails(w http.ResponseWriter, r *http.Request, params GetRequestDetailsParams)
	// Revoke/delete a token (admin only)
	// (DELETE /api/tokens/{tokenId})
	DeleteToken(w http.ResponseWriter, r *http.Request, tokenId string)
	// Get token details (admin only)
	// (GET /api/tokens/{tokenId})
	GetToken(w http.ResponseWriter, r *http.Request, tokenId string)
	// List all users
	// (GET /api/users)
	ListUsers(w http.ResponseWriter, r *http.Request)
	// Create a new user
	// (POST /api/users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Get a user by ID
	// (GET /api/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId string)
	// List API tokens for a specific user (admin only)
	// (GET /api/users/{userId}/tokens)
	ListTokens(w http.ResponseWriter, r *http.Request, userId string)
	// Create a new API token for a specific user (admin only)
	// (POST /api/users/{userId}/tokens)
	CreateToken(w http.ResponseWriter, r *http.Request, userId string)
	// Health check
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Logs out the current user
	// (GET /logout)
	LogoutUser(w http.ResponseWriter, r *http.Request, params LogoutUserParams)
	// Get current logged user information
	// (GET /me)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// Get OpenAPI specification of Taronja Gateway in YAML format
	// (GET /openapi.yaml)
	GetOpenApiYaml(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllUserCredits operation middleware
func (siw *ServerInterfaceWrapper) GetAllUserCredits(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllUserCreditsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUserCredits(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserCredits operation middleware
func (siw *ServerInterfaceWrapper) GetUserCredits(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserCredits(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AdjustUserCredits operation middleware
func (siw *ServerInterfaceWrapper) AdjustUserCredits(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdjustUserCredits(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserCreditHistory operation middleware
func (siw *ServerInterfaceWrapper) GetUserCreditHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserCreditHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserCreditHistory(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestStatistics operation middleware
func (siw *ServerInterfaceWrapper) GetRequestStatistics(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRequestStatisticsParams

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestStatistics(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestDetails operation middleware
func (siw *ServerInterfaceWrapper) GetRequestDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRequestDetailsParams

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestDetails(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tokenId" -------------
	var tokenId string

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", r.PathValue("tokenId"), &tokenId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tokenId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteToken(w, r, tokenId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tokenId" -------------
	var tokenId string

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", r.PathValue("tokenId"), &tokenId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tokenId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToken(w, r, tokenId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTokens operation middleware
func (siw *ServerInterfaceWrapper) ListTokens(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTokens(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToken operation middleware
func (siw *ServerInterfaceWrapper) CreateToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToken(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutUserParams

	// ------------- Optional query parameter "redirect" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirect", r.URL.Query(), &params.Redirect)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redirect", Err: err})
		return
	}

	{
		var cookie *http.Cookie

		if cookie, err = r.Cookie("tg_session_token"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "tg_session_token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tg_session_token", Err: err})
				return
			}
			params.TgSessionToken = &value

		}
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOpenApiYaml operation middleware
func (siw *ServerInterfaceWrapper) GetOpenApiYaml(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenApiYaml(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/admin/credits", wrapper.GetAllUserCredits)
	m.HandleFunc("GET "+options.BaseURL+"/api/credits/{userId}", wrapper.GetUserCredits)
	m.HandleFunc("POST "+options.BaseURL+"/api/credits/{userId}", wrapper.AdjustUserCredits)
	m.HandleFunc("GET "+options.BaseURL+"/api/credits/{userId}/history", wrapper.GetUserCreditHistory)
	m.HandleFunc("GET "+options.BaseURL+"/api/statistics/requests", wrapper.GetRequestStatistics)
	m.HandleFunc("GET "+options.BaseURL+"/api/statistics/requests/details", wrapper.GetRequestDetails)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/tokens/{tokenId}", wrapper.DeleteToken)
	m.HandleFunc("GET "+options.BaseURL+"/api/tokens/{tokenId}", wrapper.GetToken)
	m.HandleFunc("GET "+options.BaseURL+"/api/users", wrapper.ListUsers)
	m.HandleFunc("POST "+options.BaseURL+"/api/users", wrapper.CreateUser)
	m.HandleFunc("GET "+options.BaseURL+"/api/users/{userId}", wrapper.GetUserById)
	m.HandleFunc("GET "+options.BaseURL+"/api/users/{userId}/tokens", wrapper.ListTokens)
	m.HandleFunc("POST "+options.BaseURL+"/api/users/{userId}/tokens", wrapper.CreateToken)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)
	m.HandleFunc("GET "+options.BaseURL+"/logout", wrapper.LogoutUser)
	m.HandleFunc("GET "+options.BaseURL+"/me", wrapper.GetCurrentUser)
	m.HandleFunc("GET "+options.BaseURL+"/openapi.yaml", wrapper.GetOpenApiYaml)

	return m
}

type GetAllUserCreditsRequestObject struct {
	Params GetAllUserCreditsParams
}

type GetAllUserCreditsResponseObject interface {
	VisitGetAllUserCreditsResponse(w http.ResponseWriter) error
}

type GetAllUserCredits200JSONResponse AllUserCreditsResponse

func (response GetAllUserCredits200JSONResponse) VisitGetAllUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUserCredits401JSONResponse Error

func (response GetAllUserCredits401JSONResponse) VisitGetAllUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUserCredits403JSONResponse Error

func (response GetAllUserCredits403JSONResponse) VisitGetAllUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUserCredits500JSONResponse Error

func (response GetAllUserCredits500JSONResponse) VisitGetAllUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCreditsRequestObject struct {
	UserId string `json:"userId"`
}

type GetUserCreditsResponseObject interface {
	VisitGetUserCreditsResponse(w http.ResponseWriter) error
}

type GetUserCredits200JSONResponse UserCreditsResponse

func (response GetUserCredits200JSONResponse) VisitGetUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCredits401JSONResponse Error

func (response GetUserCredits401JSONResponse) VisitGetUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCredits403JSONResponse Error

func (response GetUserCredits403JSONResponse) VisitGetUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCredits404JSONResponse Error

func (response GetUserCredits404JSONResponse) VisitGetUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCredits500JSONResponse Error

func (response GetUserCredits500JSONResponse) VisitGetUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AdjustUserCreditsRequestObject struct {
	UserId string `json:"userId"`
	Body   *AdjustUserCreditsJSONRequestBody
}

type AdjustUserCreditsResponseObject interface {
	VisitAdjustUserCreditsResponse(w http.ResponseWriter) error
}

type AdjustUserCredits200JSONResponse CreditTransactionResponse

func (response AdjustUserCredits200JSONResponse) VisitAdjustUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdjustUserCredits400JSONResponse Error

func (response AdjustUserCredits400JSONResponse) VisitAdjustUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AdjustUserCredits401JSONResponse Error

func (response AdjustUserCredits401JSONResponse) VisitAdjustUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AdjustUserCredits403JSONResponse Error

func (response AdjustUserCredits403JSONResponse) VisitAdjustUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AdjustUserCredits404JSONResponse Error

func (response AdjustUserCredits404JSONResponse) VisitAdjustUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AdjustUserCredits500JSONResponse Error

func (response AdjustUserCredits500JSONResponse) VisitAdjustUserCreditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCreditHistoryRequestObject struct {
	UserId string `json:"userId"`
	Params GetUserCreditHistoryParams
}

type GetUserCreditHistoryResponseObject interface {
	VisitGetUserCreditHistoryResponse(w http.ResponseWriter) error
}

type GetUserCreditHistory200JSONResponse CreditHistoryResponse

func (response GetUserCreditHistory200JSONResponse) VisitGetUserCreditHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCreditHistory401JSONResponse Error

func (response GetUserCreditHistory401JSONResponse) VisitGetUserCreditHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCreditHistory403JSONResponse Error

func (response GetUserCreditHistory403JSONResponse) VisitGetUserCreditHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCreditHistory404JSONResponse Error

func (response GetUserCreditHistory404JSONResponse) VisitGetUserCreditHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserCreditHistory500JSONResponse Error

func (response GetUserCreditHistory500JSONResponse) VisitGetUserCreditHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestStatisticsRequestObject struct {
	Params GetRequestStatisticsParams
}

type GetRequestStatisticsResponseObject interface {
	VisitGetRequestStatisticsResponse(w http.ResponseWriter) error
}

type GetRequestStatistics200JSONResponse RequestStatistics

func (response GetRequestStatistics200JSONResponse) VisitGetRequestStatisticsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestStatistics401JSONResponse Error

func (response GetRequestStatistics401JSONResponse) VisitGetRequestStatisticsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestStatistics500JSONResponse Error

func (response GetRequestStatistics500JSONResponse) VisitGetRequestStatisticsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestDetailsRequestObject struct {
	Params GetRequestDetailsParams
}

type GetRequestDetailsResponseObject interface {
	VisitGetRequestDetailsResponse(w http.ResponseWriter) error
}

type GetRequestDetails200JSONResponse RequestDetailsResponse

func (response GetRequestDetails200JSONResponse) VisitGetRequestDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestDetails401JSONResponse Error

func (response GetRequestDetails401JSONResponse) VisitGetRequestDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTokenRequestObject struct {
	TokenId string `json:"tokenId"`
}

type DeleteTokenResponseObject interface {
	VisitDeleteTokenResponse(w http.ResponseWriter) error
}

type DeleteToken204Response struct {
}

func (response DeleteToken204Response) VisitDeleteTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteToken401JSONResponse Error

func (response DeleteToken401JSONResponse) VisitDeleteTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteToken404JSONResponse Error

func (response DeleteToken404JSONResponse) VisitDeleteTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteToken500JSONResponse Error

func (response DeleteToken500JSONResponse) VisitDeleteTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTokenRequestObject struct {
	TokenId string `json:"tokenId"`
}

type GetTokenResponseObject interface {
	VisitGetTokenResponse(w http.ResponseWriter) error
}

type GetToken200JSONResponse TokenResponse

func (response GetToken200JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetToken401JSONResponse Error

func (response GetToken401JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetToken404JSONResponse Error

func (response GetToken404JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetToken500JSONResponse Error

func (response GetToken500JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersRequestObject struct {
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse []UserResponse

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers401JSONResponse Error

func (response ListUsers401JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers500JSONResponse Error

func (response ListUsers500JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse UserResponse

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse Error

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser409JSONResponse Error

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse Error

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIdRequestObject struct {
	UserId string `json:"userId"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse UserResponse

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById400JSONResponse Error

func (response GetUserById400JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById401JSONResponse Error

func (response GetUserById401JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById404JSONResponse Error

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById500JSONResponse Error

func (response GetUserById500JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTokensRequestObject struct {
	UserId string `json:"userId"`
}

type ListTokensResponseObject interface {
	VisitListTokensResponse(w http.ResponseWriter) error
}

type ListTokens200JSONResponse []TokenResponse

func (response ListTokens200JSONResponse) VisitListTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTokens401JSONResponse Error

func (response ListTokens401JSONResponse) VisitListTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListTokens404JSONResponse Error

func (response ListTokens404JSONResponse) VisitListTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTokens500JSONResponse Error

func (response ListTokens500JSONResponse) VisitListTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTokenRequestObject struct {
	UserId string `json:"userId"`
	Body   *CreateTokenJSONRequestBody
}

type CreateTokenResponseObject interface {
	VisitCreateTokenResponse(w http.ResponseWriter) error
}

type CreateToken201JSONResponse TokenCreateResponse

func (response CreateToken201JSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateToken400JSONResponse Error

func (response CreateToken400JSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateToken401JSONResponse Error

func (response CreateToken401JSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateToken404JSONResponse Error

func (response CreateToken404JSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateToken500JSONResponse Error

func (response CreateToken500JSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse HealthResponse

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogoutUserRequestObject struct {
	Params LogoutUserParams
}

type LogoutUserResponseObject interface {
	VisitLogoutUserResponse(w http.ResponseWriter) error
}

type LogoutUser302ResponseHeaders struct {
	CacheControl string
	Location     string
	SetCookie    string
}

type LogoutUser302Response struct {
	Headers LogoutUser302ResponseHeaders
}

func (response LogoutUser302Response) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(302)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse struct {
	Authenticated *bool                `json:"authenticated,omitempty"`
	Email         *openapi_types.Email `json:"email,omitempty"`
	FamilyName    *string              `json:"familyName"`
	GivenName     *string              `json:"givenName"`
	IsAdmin       *bool                `json:"isAdmin,omitempty"`
	Name          *string              `json:"name"`
	Picture       *string              `json:"picture"`
	Provider      *string              `json:"provider,omitempty"`
	Timestamp     *time.Time           `json:"timestamp,omitempty"`
	Username      *string              `json:"username,omitempty"`
}

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401JSONResponse Error

func (response GetCurrentUser401JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetOpenApiYamlRequestObject struct {
}

type GetOpenApiYamlResponseObject interface {
	VisitGetOpenApiYamlResponse(w http.ResponseWriter) error
}

type GetOpenApiYaml200ApplicationxYamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetOpenApiYaml200ApplicationxYamlResponse) VisitGetOpenApiYamlResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/x-yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetOpenApiYaml200TextyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetOpenApiYaml200TextyamlResponse) VisitGetOpenApiYamlResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all users' credit balances (admin only)
	// (GET /api/admin/credits)
	GetAllUserCredits(ctx context.Context, request GetAllUserCreditsRequestObject) (GetAllUserCreditsResponseObject, error)
	// Get user's current credit balance
	// (GET /api/credits/{userId})
	GetUserCredits(ctx context.Context, request GetUserCreditsRequestObject) (GetUserCreditsResponseObject, error)
	// Add or deduct credits for a user (admin only)
	// (POST /api/credits/{userId})
	AdjustUserCredits(ctx context.Context, request AdjustUserCreditsRequestObject) (AdjustUserCreditsResponseObject, error)
	// Get user's credit transaction history
	// (GET /api/credits/{userId}/history)
	GetUserCreditHistory(ctx context.Context, request GetUserCreditHistoryRequestObject) (GetUserCreditHistoryResponseObject, error)
	// Get request statistics
	// (GET /api/statistics/requests)
	GetRequestStatistics(ctx context.Context, request GetRequestStatisticsRequestObject) (GetRequestStatisticsResponseObject, error)
	// Retrieve detailed information about requests made to the gateway
	// (GET /api/statistics/requests/details)
	GetRequestDetails(ctx context.Context, request GetRequestDetailsRequestObject) (GetRequestDetailsResponseObject, error)
	// Revoke/delete a token (admin only)
	// (DELETE /api/tokens/{tokenId})
	DeleteToken(ctx context.Context, request DeleteTokenRequestObject) (DeleteTokenResponseObject, error)
	// Get token details (admin only)
	// (GET /api/tokens/{tokenId})
	GetToken(ctx context.Context, request GetTokenRequestObject) (GetTokenResponseObject, error)
	// List all users
	// (GET /api/users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /api/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Get a user by ID
	// (GET /api/users/{userId})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
	// List API tokens for a specific user (admin only)
	// (GET /api/users/{userId}/tokens)
	ListTokens(ctx context.Context, request ListTokensRequestObject) (ListTokensResponseObject, error)
	// Create a new API token for a specific user (admin only)
	// (POST /api/users/{userId}/tokens)
	CreateToken(ctx context.Context, request CreateTokenRequestObject) (CreateTokenResponseObject, error)
	// Health check
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Logs out the current user
	// (GET /logout)
	LogoutUser(ctx context.Context, request LogoutUserRequestObject) (LogoutUserResponseObject, error)
	// Get current logged user information
	// (GET /me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Get OpenAPI specification of Taronja Gateway in YAML format
	// (GET /openapi.yaml)
	GetOpenApiYaml(ctx context.Context, request GetOpenApiYamlRequestObject) (GetOpenApiYamlResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllUserCredits operation middleware
func (sh *strictHandler) GetAllUserCredits(w http.ResponseWriter, r *http.Request, params GetAllUserCreditsParams) {
	var request GetAllUserCreditsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllUserCredits(ctx, request.(GetAllUserCreditsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllUserCredits")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllUserCreditsResponseObject); ok {
		if err := validResponse.VisitGetAllUserCreditsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserCredits operation middleware
func (sh *strictHandler) GetUserCredits(w http.ResponseWriter, r *http.Request, userId string) {
	var request GetUserCreditsRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserCredits(ctx, request.(GetUserCreditsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserCredits")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserCreditsResponseObject); ok {
		if err := validResponse.VisitGetUserCreditsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdjustUserCredits operation middleware
func (sh *strictHandler) AdjustUserCredits(w http.ResponseWriter, r *http.Request, userId string) {
	var request AdjustUserCreditsRequestObject

	request.UserId = userId

	var body AdjustUserCreditsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AdjustUserCredits(ctx, request.(AdjustUserCreditsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdjustUserCredits")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AdjustUserCreditsResponseObject); ok {
		if err := validResponse.VisitAdjustUserCreditsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserCreditHistory operation middleware
func (sh *strictHandler) GetUserCreditHistory(w http.ResponseWriter, r *http.Request, userId string, params GetUserCreditHistoryParams) {
	var request GetUserCreditHistoryRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserCreditHistory(ctx, request.(GetUserCreditHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserCreditHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserCreditHistoryResponseObject); ok {
		if err := validResponse.VisitGetUserCreditHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRequestStatistics operation middleware
func (sh *strictHandler) GetRequestStatistics(w http.ResponseWriter, r *http.Request, params GetRequestStatisticsParams) {
	var request GetRequestStatisticsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRequestStatistics(ctx, request.(GetRequestStatisticsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRequestStatistics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRequestStatisticsResponseObject); ok {
		if err := validResponse.VisitGetRequestStatisticsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRequestDetails operation middleware
func (sh *strictHandler) GetRequestDetails(w http.ResponseWriter, r *http.Request, params GetRequestDetailsParams) {
	var request GetRequestDetailsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRequestDetails(ctx, request.(GetRequestDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRequestDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRequestDetailsResponseObject); ok {
		if err := validResponse.VisitGetRequestDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteToken operation middleware
func (sh *strictHandler) DeleteToken(w http.ResponseWriter, r *http.Request, tokenId string) {
	var request DeleteTokenRequestObject

	request.TokenId = tokenId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteToken(ctx, request.(DeleteTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTokenResponseObject); ok {
		if err := validResponse.VisitDeleteTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetToken operation middleware
func (sh *strictHandler) GetToken(w http.ResponseWriter, r *http.Request, tokenId string) {
	var request GetTokenRequestObject

	request.TokenId = tokenId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetToken(ctx, request.(GetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTokenResponseObject); ok {
		if err := validResponse.VisitGetTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(w http.ResponseWriter, r *http.Request) {
	var request ListUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(w http.ResponseWriter, r *http.Request, userId string) {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx, request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTokens operation middleware
func (sh *strictHandler) ListTokens(w http.ResponseWriter, r *http.Request, userId string) {
	var request ListTokensRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTokens(ctx, request.(ListTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTokensResponseObject); ok {
		if err := validResponse.VisitListTokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateToken operation middleware
func (sh *strictHandler) CreateToken(w http.ResponseWriter, r *http.Request, userId string) {
	var request CreateTokenRequestObject

	request.UserId = userId

	var body CreateTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateToken(ctx, request.(CreateTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTokenResponseObject); ok {
		if err := validResponse.VisitCreateTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogoutUser operation middleware
func (sh *strictHandler) LogoutUser(w http.ResponseWriter, r *http.Request, params LogoutUserParams) {
	var request LogoutUserRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogoutUser(ctx, request.(LogoutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogoutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutUserResponseObject); ok {
		if err := validResponse.VisitLogoutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOpenApiYaml operation middleware
func (sh *strictHandler) GetOpenApiYaml(w http.ResponseWriter, r *http.Request) {
	var request GetOpenApiYamlRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOpenApiYaml(ctx, request.(GetOpenApiYamlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOpenApiYaml")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOpenApiYamlResponseObject); ok {
		if err := validResponse.VisitGetOpenApiYamlResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
