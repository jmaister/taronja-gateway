name: CI build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build Go
      run: go build -v ./...

    - name: Set environment variable
      run: echo "RUNNING_ON_CI=true" >> $GITHUB_ENV

    - name: Test
      run: |
        go test -v -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out > coverage_full.txt
        # Extract per-package coverage, excluding lines with "total:"
        awk '!/total:/ {pkg=$1; split(pkg, p, "/"); current_pkg=p[1]; for(i=2; i<=3 && i<=length(p); i++) current_pkg=current_pkg"/"p[i]; sub(/:.*/, "", current_pkg); raw_coverage=$NF; sub(/%/, "", raw_coverage); coverage[current_pkg]+=raw_coverage; count[current_pkg]++} END {for (pkg in coverage) printf "%s %.1f%\n", pkg, coverage[pkg]/count[pkg]}' coverage_full.txt > package_coverage.txt
        # Extract total coverage
        grep total: coverage_full.txt | awk '{print "Total " $3}' >> package_coverage.txt
        echo "Tests completed"

    - name: Post Coverage Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('package_coverage.txt', 'utf8');
          const lines = report.trim().split('\n');
          
          let table = `<!-- coverage_comment -->\n`;
          table += `**Code Coverage Report**\n\n`;
          table += `| Package          | Coverage |\n`;
          table += `|------------------|----------|\n`;
          
          let totalCoverage = "";
          
          for (const line of lines) {
            const parts = line.split(' ');
            if (parts[0] === 'Total') {
              totalCoverage = parts[1];
            } else {
              // Assuming package name can have spaces if we didn't process it carefully, join all but last part
              const pkgName = parts.slice(0, -1).join(' ');
              const coverage = parts[parts.length -1];
              table += `| ${pkgName} | ${coverage} |\n`;
            }
          }
          
          if (totalCoverage) {
            table += `| **Total**        | **${totalCoverage}** |\n`;
          } else {
            // Fallback if total wasn't found for some reason
            table += `| **Total**        | **N/A** |\n`;
          }

          const commentBody = table;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(comment => comment.body.includes(commentMarker));

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });
          }
        
    - name: Check GoReleaser Config
      uses: goreleaser/goreleaser-action@v5
      with:
        version: latest
        args: check
