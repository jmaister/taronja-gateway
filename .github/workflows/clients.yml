name: Generate and Update Clients

on:
  release:
    types: [published]

jobs:
  generate-and-push-clients:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Ensure temp and repo folders exist
        run: |
          mkdir -p ./clients-temp/typescript/
          mkdir -p ./clients-temp/go/
          mkdir -p ./clients-repo/typescript/
          mkdir -p ./clients-repo/go/
      
      # Set up environments for code generation
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json


      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      # Step 1: Generate Clients to a temporary directory
      - name: Generate all clients
        run: |
          # npm install @openapitools/openapi-generator-cli
          # npx --yes @hey-api/openapi-ts -i ./api/taronja-gateway-api.yaml -o ./clients-temp/typescript -c @hey-api/client-fetch
          # npx @openapitools/openapi-generator-cli generate \
          #  -i api/taronja-gateway-api.yaml \
          #  -g go \
          #  -o ./clients-temp/go
          go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config api/cfg_client.yaml api/taronja-gateway-api.yaml
      
      # Step 2: Checkout the separate clients repository
      - name: Checkout clients repository
        uses: actions/checkout@v4
        with:
          repository: jmaister/taronja-gateway-clients
          path: ./clients-repo
          token: ${{ secrets.CLIENTS_REPO_TOKEN }}
      
      # Step 3: Copy generated code into the clients repository
      - name: Copy generated code to clients repository
        run: |
          # rsync -av --delete ./clients-temp/typescript/ ./clients-repo/typescript/
          rsync -av --delete --exclude='go.mod' --exclude='go.sum' ./clients-temp/go/ ./clients-repo/go/
      
      # Step 4: Commit and push changes (only on push, not on PR)
      - name: Commit and push changes
        run: |
          cd ./clients-repo
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "feat(ci): Auto-generated clients from new API spec" || true
          git push

          # Get the latest tag from the main repo and use it for the clients repo, with go/ prefix for Go submodule
          cd ..
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          cd clients-repo
          git tag "$LATEST_TAG"
          git push origin "$LATEST_TAG"
          # Go modules requires the tag to have "<folder>/<version"
          git tag "go/$LATEST_TAG"
          git push origin "go/$LATEST_TAG"
